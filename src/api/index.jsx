import { useState, useEffect } from 'react';

/**
 * Hook personnalis√© qui r√©cup√®re une liste de donn√©es depuis une URL d'API JSON et renvoie les paires cl√©-valeur sp√©cifi√©es sous forme d'objet.
 * @param {string} jsonUrl - L'URL de l'API JSON √† partir de laquelle r√©cup√©rer les donn√©es.
 * @returns {object} Un objet contenant les variables suivantes :
 * - jsonData : les donn√©es JSON r√©cup√©r√©es depuis une API.
 * - setJsonData : une fonction pour mettre √† jour les donn√©es JSON.
 * - isDataLoading : un indicateur bool√©en pour indiquer si les donn√©es sont en cours de chargement.
 * - setDataLoading : une fonction pour mettre √† jour l'indicateur de chargement des donn√©es.
 * - error : une erreur √©ventuelle survenue lors du chargement des donn√©es.
 * - setError : une fonction pour mettre √† jour l'erreur √©ventuelle.
 */
export function useFetchList(jsonUrl) {
  /**
   * Etat des donn√©es charg√©es √† partir du fichier json
   * @typedef jsonData - Tableau d'objets json contenant les √©l√©ments pour la liste
   * @typedef setJsonData - Fonction qui permet de mettre √† jour le tableau de donn√©es.
   */
  const [jsonData, setJsonData] = useState(null);

  /**
   * √âtat de chargement indiquant si les donn√©es sont en cours de chargement ou non.
   * @typedef isDataLoading - Indique si les donn√©es sont en cours de chargement ou non.
   * @typedef setDataLoading - Fonction qui permet de mettre √† jour l'√©tat de chargement de donn√©es.
   */
  const [isDataLoading, setDataLoading] = useState(false);

  /**
   * √âtat d'erreur.
   * @typedef error - Indique s'il y a une erreur ou non.
   * @typedef setError - Fonction qui permet de mettre √† jour l'√©tat d'erreur.
   */
  const [error, setError] = useState(false);

  useEffect(() => {
    async function fetchData(jsonUrl) {
      setDataLoading(true); // Indiquer que les donn√©es sont en cours de chargement
      try {
        const response = await fetch(jsonUrl);
        const data = await response.json();
        if (!Array.isArray(data)) {
          throw new Error("Le tableau d'√©l√©ments n'a pas √©t√© trouv√©.");
        }
        setJsonData(data); // ‚úÖ Mettre √† jour les donn√©es JSON dans l'√©tat
      } catch (err) {
        console.log(err);
        setError(true); // ‚õî Indiquer qu'une erreur s'est produite lors de la r√©cup√©ration des donn√©es
      } finally {
        setDataLoading(false); // üëç Indiquer que les donn√©es ne sont plus en cours de chargement
      }
    }
    //
    fetchData(jsonUrl);
  }, [jsonUrl]);

  return {
    jsonData,
    setJsonData,
    isDataLoading,
    setDataLoading,
    error,
    setError,
  };
}
